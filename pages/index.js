import React, { useState, useEffect } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Post from "../components/Post";
import AddPostModal from "../components/AddPostModal";

export async function getStaticProps() {
    let postData = [];
    try {
        const res = await fetch(
            "https://jsonplaceholder.typicode.com/posts?_start=0&_limit=20"
        );
        postData = await res.json();
    } catch (error) {
        console.error(error);
    }
    return {
        props: {
            postData,
        },
    };
}

export default function Home({ postData }) {
    const [posts, setPosts] = useState([]);
    const [modalShowing, setModalShowing] = useState(false);
    const [searchValue, setSearchValue] = useState("");

    useEffect(() => {
        setPosts(postData);
    }, []);

    useEffect(() => {
        console.log("searchValue: ", searchValue);
    }, [searchValue]);

    useEffect(() => {
        if (modalShowing) {
            document.body.style.overflow = "hidden";
        } else {
            document.body.style.overflow = "auto";
        }
    }, [modalShowing]);

    const handleCreatePost = async (title, body, userId) => {
        const data = { title, body, userId };
        try {
            const res = await fetch(
                "https://jsonplaceholder.typicode.com/posts",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data),
                }
            );
            postData = await res.json();
            if (postData) {
                setPosts([...posts, postData]);
            }
        } catch (error) {
            console.error(error);
        }
        setModalShowing(false);
    };

    return (
        <div className="container">
            <Head>
                <title>Posts</title>
                <meta
                    name="List of posts"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>Posts</h1>
                <button
                    className={`${styles.addBtn} btn-primary`}
                    onClick={() => setModalShowing(true)}
                >
                    <span>+</span> New Post
                </button>
                {/* Search bar to search by ID */}
                <div className={styles.searchBar}>
                    <label htmlFor="search">Search by Id: </label>
                    <input
                        type="text"
                        name="search"
                        id="search"
                        value={searchValue}
                        onChange={(e) => setSearchValue(e.target.value)}
                    />
                </div>
                <div>
                    {posts.length > 0 &&
                        posts.map((post, index) => {
                            return <Post {...post} key={index} />;
                        })}
                </div>
            </main>
            {/* Add Post Modal */}
            {modalShowing && (
                <AddPostModal
                    handleCreatePost={handleCreatePost}
                    closeModal={() => setModalShowing(false)}
                />
            )}
        </div>
    );
}
